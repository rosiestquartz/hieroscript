[{"C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\index.js":"1","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\App.js":"2","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Header.js":"3","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Console.js":"4","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Editor.js":"5","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Browser.js":"6"},{"size":146,"mtime":1607623947451,"results":"7","hashOfConfig":"8"},{"size":3529,"mtime":1607965705499,"results":"9","hashOfConfig":"8"},{"size":563,"mtime":1607018549071,"results":"10","hashOfConfig":"8"},{"size":2061,"mtime":1607959254696,"results":"11","hashOfConfig":"8"},{"size":1148,"mtime":1607617205003,"results":"12","hashOfConfig":"8"},{"size":2846,"mtime":1607617954103,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"zt6a14",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\index.js",[],["30","31"],"C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\App.js",["32","33"],"import React, { Component } from 'react';\nimport {Header} from './Header';\nimport Editor from './Editor';\nimport Browser from './Browser';\nimport Console from './Console';\nimport './App.scss';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nconst PlaygroundHeader = ({ title, runCode }) => (\n  \n  <div className=\"playground-header\">\n    <div className=\"columns\">\n      <div className=\"column\">\n        <h2 className=\"title is-6\">{title}</h2>\n      </div>\n      <div className=\"column has-text-right\">\n        <button onClick={runCode}>Run</button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default class Playground extends Component {\n  \n  state = {\n    history: [],\n    title: '',\n    js: '//This is where the original JavaScript code you create will be shown. You do not type here.',\n    isProcessing: false // tiny way to stop a user from hitting run 10000 times in a row\n  };\n\n  // some helpers to make setting code state easier later\n  setTitle = title => this.setState({ title });\n  setHistory = history => this.setState({ history });\n  setJs = js => this.setState({ js });\n\n  addHistory = text => {\n    const newHistory = [...this.state.history, { text }];\n    this.setHistory(newHistory);\n  };\n\n  clearHistory = () => this.setHistory([]);\n\n  /**\n   * Since browser only runs when editor contents/value change, we set things to blank and then reset them\n   */\n  runCode = () => {\n    if (this.state.isProcessing) return false;\n    this.setState({ isProcessing: true });\n\n    const { js } = this.state;\n    this.setJs('');\n\n    setTimeout(() => {\n      this.setJs(js);\n      this.setState({ isProcessing: false });\n    }, 250);\n  };\n\n  \n  render() {\n\n    function newProject(e){ // this handles the new project button in the topnav\n    \n      e.preventDefault();\n      if (window.confirm(\"Are you sure you would like to start a new project?\")){\n        window.open(\"App.js\"); // wss tijdelijk? opens new fresh tab for new project\n      }\n  }\n\n\n    const { history, title, js } = this.state;\n    const HieroScriptItems = [\n      {\n        id: 'plus',\n        name: 'plussign',\n        thumb: '/images/plusicon.png'\n      }\n    ]\n    \n    return (\n      \n      <div className=\"playground\">\n        <Header></Header>\n          <div className=\"topnav\">\n        \n            <a href=\"\" onClick={newProject}>New Project</a>\n          </div><br></br>\n          \n          <ul className=\"characters\">\n  {HieroScriptItems.map(({id, name, thumb}) => {\n    return (\n      <li key={id}>\n        <div className=\"characters-thumb\">\n          <img src={thumb} alt={`${name} Thumb`} />\n        </div>\n        <p>\n          { name }\n        </p>\n      </li>\n    );\n  })}\n</ul>\n        <PlaygroundHeader title={title} runCode={this.runCode} />\n\n        <div className=\"playground-content\">\n          <div className=\"dragdrop\">\n            {/* This is where the visual part of hieroscript goes once we figure out how to do it */}\n          </div>\n\n        {/* loads Codemirror editor so user can see what code they're making */}\n          <Editor \n          language=\"javascript\" \n          code={js} \n          updateCode={this.setJs} \n          />  \n\n          {/* browser displays all user created code in an iframe */}\n          <Browser\n            //playgroundId={playgroundId}\n            js={js}\n            addHistory={this.addHistory}\n          />\n\n          {/* console only shows the output of history */}\n          <Console history={history} clearHistory={this.clearHistory} />\n        </div>\n      </div>\n    );\n  }\n}\n","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Header.js",[],"C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Console.js",["34","35"],"import React, { useEffect, useRef } from 'react';\nimport './Console.scss';\n\nexport default function Console({ history, clearHistory }) {\n  // const scrollDiv = useRef(null);\n\n  // useEffect(\n  //   () => {\n  //     scrollToBottom();\n  //   },\n  //   [history]\n  // );\n\n  // const scrollToBottom = () => {\n  //   animateScroll(300);\n  // };\n\n  // // First, define a helper function.\n  // const animateScroll = duration => {\n  //   var start = scrollDiv.current.scrollTop;\n  //   var end = scrollDiv.current.scrollHeight;\n  //   var change = end - start;\n  //   var increment = 20;\n\n  //   function easeInOut(currentTime, start, change, duration) {\n  //     // by Robert Penner\n  //     currentTime /= duration / 2;\n  //     if (currentTime < 1) {\n  //       return (change / 2) * currentTime * currentTime + start;\n  //     }\n  //     currentTime -= 1;\n  //     return (-change / 2) * (currentTime * (currentTime - 2) - 1) + start;\n  //   }\n\n  //   function animate(elapsedTime) {\n  //     elapsedTime += increment;\n  //     var position = easeInOut(elapsedTime, start, change, duration);\n  //     scrollDiv.current.scrollTop = position;\n  //     if (elapsedTime < duration) {\n  //       setTimeout(function() {\n  //         animate(elapsedTime);\n  //       }, increment);\n  //     }\n  //   }\n\n  //   animate(0);\n  // };\n\n  return (\n    <div className=\"playground-console-container\">\n      <div className=\"playground-console\"> \n      {/* this div used to have ref={scrollDiv} to link with the animation stuff */}\n        <ul>\n          {history.map((item, index) => (\n            <li key={index} className=\"console-line\">\n              <span className=\"console-carrot\">></span>{' '}\n              <span className=\"console-text\">{item.text}</span>\n            </li>\n          ))}\n          <li>\n            <span className=\"console-carrot\">></span>\n          </li>\n        </ul>\n\n        <button\n          onClick={clearHistory}\n          className=\"button is-white is-outlined is-small\"\n        >\n          Clear\n        </button>\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Editor.js",[],"C:\\Users\\Reece McGowan\\hieroscript-new\\hieroscript\\src\\Browser.js",["36","37"],"import React, { useEffect, useRef } from 'react';\n\n/*\n   Builds the code iframe. Remember rosie, separate iframe.html doesn't work in React, \n   it crashed the browser!\n \n   scotchLog is our way of sending data up to the parent through postMessage\n */\nconst buildIframeSrc = (html, css, js) => ` \n  <html>\n  <head>\n    <style>${css}</style>\n  </head>\n  <body>\n  ${html}\n\n  <script>\n    function scotchLog() {\n      let output = \"\", arg, i;\n      for (i = 0; i < arguments.length; i++) {\n        arg = arguments[i];\n        output += typeof arg === \"object\" ? JSON.stringify(arg) : arg;\n      }\n      window.parent.postMessage(output, '*');\n      console.log(...arguments);\n    }\n\n    // -----------------------------------------\n\n    try {\n      ${js}\n    } catch (err) {\n      window.parent.postMessage(err.message, '*');\n      console.error(err.message);\n    }\n  </script>\n  </body>\n  </html>\n`;\n\n/**\n * The browser component has a nested iframe\n * Every time the js props change, destroy the iframe and create a new one\n */\nexport default function Browser({ sandboxId, html, css, js, addHistory }) {\n  const iframeContainer = useRef(null);\n   \n  /**\n   * event listener for postMessage coming from our iframe\n   */\n  useEffect(() => {\n    window.addEventListener('message', e => {\n      \n      if (!e.data) return false; // only handle if theres data\n      if (typeof e.data !== 'string') return false; // data must be a string\n      if (e.data.includes('_')) return false; // dont watch for events emitted by the react library\n      addHistory(e.data);\n    });\n  }, []);\n\n  /**\n   * Run the code, yay fun!\n   */\n  useEffect(() => execute(), [html, css, js]);\n\n  /**\n   * Run all our code in the iframe\n   * Destroys the iframe\n   * Rebuilds the iframe\n   */\n  const execute = () => {\n    // remove all children\n    while (iframeContainer.current.hasChildNodes()) {\n      iframeContainer.current.removeChild(iframeContainer.current.lastChild);\n    }\n\n    // create new iframe\n    let iframe = document.createElement('iframe');\n    iframe.height = '100%';\n    iframe.width = '100%';\n    iframe.sandbox = 'allow-scripts allow-same-origin';\n    iframe.style.border = 'none';\n    iframe.background = '#fff';\n\n    // convert all console.log to use scotchLog\n    // scotchLog will send events back up to this parent\n    // we can use that to add to history\n    // scotchLog will also run console.log()\n   const newJs = js.replace(new RegExp('console.log', 'g'), 'scotchLog');\n   iframe.srcdoc = buildIframeSrc(html, css, newJs);\n   iframeContainer.current.appendChild(iframe);\n  };\n\n  const display = !html && !css ? 'none' : 'block';\n\n  return (\n    <div\n      ref={iframeContainer}\n      className=\"iframe-container\"\n      style={{\n        height: '100%',\n        width: '100%',\n        background: 'white',\n        display\n      }}\n    />\n  );\n}\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":7,"column":10,"nodeType":"44","messageId":"45","endLine":7,"endColumn":25},{"ruleId":"46","severity":1,"message":"47","line":87,"column":13,"nodeType":"48","endLine":87,"endColumn":45},{"ruleId":"42","severity":1,"message":"49","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"50","line":1,"column":28,"nodeType":"44","messageId":"45","endLine":1,"endColumn":34},{"ruleId":"51","severity":1,"message":"52","line":59,"column":6,"nodeType":"53","endLine":59,"endColumn":8,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":64,"column":30,"nodeType":"53","endLine":64,"endColumn":45,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'DragDropContext' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'addHistory'. Either include it or remove the dependency array. If 'addHistory' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["59"],"React Hook useEffect has a missing dependency: 'execute'. Either include it or remove the dependency array.",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [addHistory]",{"range":"65","text":"66"},"Update the dependencies array to be: [html, css, js, execute]",{"range":"67","text":"68"},[1570,1572],"[addHistory]",[1645,1660],"[html, css, js, execute]"]